#! /usr/bin/python3

from more_itertools import sliced
import pywikibot
import pywikibot.bot as bot
import pywikibot.pagegenerators as pg
import mwparserfromhell
import re

from usage_bot.instantcommons import from_instantcommons
from usage_bot.osm import from_taginfo, from_overpass

MAX_FILES_PER_GALLERY = 1000

def usage_bot():
    # update_galleries(from_taginfo(), "User:Usage Bot/Used on OSM")
    update_galleries(from_instantcommons(pywikibot.Site("wikitech:en")),
                     "Commons:Files used on Wikitech")

def get_existing_galleries(base_gallery):
    gen = pg.PrefixingPageGenerator(f"{base_gallery}/", content=True)
    gen = pg.RegexFilterPageGenerator(gen, fr"^{re.escape(base_gallery)}/\d+",
                                      ignore_namespace=False)
    gallery_files = { }
    for p in gen:
        files = set()
        tree = mwparserfromhell.parse(p.text)
        for gall in [tag for tag in tree.filter_tags()
                     if tag.tag == "gallery"]:
            # I don't think mwparserfromhell understands the contents
            # of <gallery>, so we have to parse it ourselves.
            for line in gall.contents.splitlines():
                files.add(line.split('|', 1)[0].strip())
        files.discard('') # Blank lines in galleries are ignored
        gallery_files[int(p.title().split('/')[-1])] = files
    return gallery_files

def update_galleries(files, base_gallery):
    site = pywikibot.Site()
    bot.log(f"{base_gallery}: {len(files)} files in use")
    gallery_files = get_existing_galleries(base_gallery)
    bot.log(f"{base_gallery}: "
            f"{sum(map(len, gallery_files.values()))} "
            "files in galleries already")
    files_set = set(files.keys())
    # Find the files we want that aren't in any gallery.
    added_files_queue = sorted(files_set.difference(*gallery_files.values()))
    bot.log(f"{base_gallery}: {len(added_files_queue)} new files")
    # First pass: find galleries that must be edited to remove files,
    # remove those files, and fill the galleries up.
    for n, these_files in sorted(gallery_files.items()):
        if these_files - files_set:
            bot.log(f"{base_gallery}/{n} needs files removed")
            these_files.intersection_update(files_set)
            space = MAX_FILES_PER_GALLERY - len(these_files)
            bot.log(f"{base_gallery}/{n} has room for {space} more files")
            these_files.update(added_files_queue[:space])
            update_gallery(f"{base_gallery}/{n}", these_files, files)
            del added_files_queue[:space]
    bot.log(f"{base_gallery}: {len(added_files_queue)} files still to add")
    # Now sort the galleries by free space
    def by_free_space(item):
        return MAX_FILES_PER_GALLERY - len(item[1])
    for n, these_files in sorted(gallery_files.items(),
                                 key=by_free_space, reverse=True):
        space = MAX_FILES_PER_GALLERY - len(these_files)
        if space < len(added_files_queue) % MAX_FILES_PER_GALLERY: break
        bot.log(f"{base_gallery}/{n} has room for {space} more files")
        these_files.update(added_files_queue[:space])
        update_gallery(f"{base_gallery}/{n}", these_files, files)
        del added_files_queue[:space]
    # Remaining space in existing galleries is too small to use
    # efficiently, so make new galleries.
    bot.log(f"{base_gallery}: {len(added_files_queue)} files still to add")

    for n, chunk in enumerate(sliced(sorted(files.keys()),
                                     MAX_FILES_PER_GALLERY),
                              start = max(gallery_files.keys())):
        bot.log(f"creating {base_gallery}/{n} with {len(chunk)} files")
        update_gallery(f"{base_gallery}/{n}", chunk, files)

def update_gallery(name, files, captions):
    site = pywikibot.Site()
    """name is the name of the gallery
       files is a collection of files it should have
       captions is the full dictionary of captions"""
    gallery = pywikibot.Page(site, name)
    gallery.text = ("{{../header}}\n<gallery>\n" +
                    "".join([f"{filename}|{captions[filename]}\n"
                             for filename in sorted(files)]) +
                    "</gallery>\n")
    with open(name, 'w') as f:
        print(gallery.text, end='', file=f)
    gallery.save("Updated with current data")

def main(*args):
    # Process global arguments to determine desired site
    local_args = pywikibot.handle_args(args)

    usage_bot()

main()
